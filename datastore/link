This discussion follows directly from collections/__init__.py
- What are sum total of fundamental functions that I must bundle together for minimal construction processes to be possible?
-- This bundle should mean that an end-to-end transformation from some source towards sink can be entirely promoted by the things inside the bundle and nothing else.
--- What would follow is the (2 x 2) matrix which would bind the input forms together with the constructors, out onto the output forms of our choosing.
---- It would have to translate into a diretc line from our satisfactory representation of prompts (source) in presence of the bundling program (constructor) towards one way connection following over to the sampling (sink) points.
----- For source to be a thought that does not have any direct attachment of devices that physically connect brain functions as digital signals into the a computer, there would have to be a constructor which would be capable of following up with the thread connecting the first event to some possible future events while making the whole task possible via alternative paths that wouldn't concern us.
------- What should concern us is the possible other constructors and possible future constructions that we would be capable of bringing about without spending any more resources than what is managed by our libraries of constructors.
--------- A clear case of possible but undesirable task would be to restore some function of the sort that would make things desirable given the current state where no constructors can be realized within short period of time. Time being of the essence when it comes to the implementation of processes that can have direct effect on other if not all subsequent processes that can be thought of and especially if that thought process shall not be bounded away by something that isn't a bound we have chooses for us.
----------- With the above key considerations, a bundle should have access to I/O interfaces whether through direct injection onto the perceptive spectrum of our choosing or an indirect augmentation via other abstract layers that sums up to the extent that reaches our desired conclusions. A way of keeping the minimal resource constraints that would enable the outer level interfaces directly connecting expectations to considerations (source -> sink). One such example could involve keeping a computation device running and keeping the physical environment suitable for causing the retention of the components in the computing environment valid, given some endpoints that does not influence computation. Third kind of element would have to enable us from reaching the computation point both from outside and beyond where the beyond is possible. Fourth component should have to do with knowledge creation and information storage.
------------- Knowledge creation implies a smooth integration of all possible information from within the task substrates both in carrying out the required transformation tasks and in securing the necessary tools that would expose the regularities in nature by which future tasks would arise. If one such task happens to be among the k levels down from the direct interactions in terms of proximity to our physical environment, then for whose proximal distance would enable the task of solving for the best possible interfacing mechanism such that the connected groups of constructors parallel to that level which would contain the access to the subsystem containing the furthest instance of some task state -- constitute the task of formulating the bringing substrate that enables possible interconnection at arbitrary levels down from arbitrary level up from that for all possible distances and complexity. If there is a maximum possible levels or k that limits viable communication between us and the most abstract state along the initial task constructor, then we would know that k is far for the signal to reach and adjust accordingly, but only when it is so by physical necessity and not otherwise.