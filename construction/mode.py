possible = [
    'reading a file from cpu memory as byte valued object',
    'sample part or whole of the set of bytes at file path',
    'copy part or whole of the byte contents to other compatible memory addresses',
    'create a custom dictionary with choosen named objects as keys and arbitrary other objects as values' 
    'assigning a name to each byte elements and storing them as record element in a dictionary',
    'assigning a name to each byte sequence and storing them as record element in a dictionary',
    'assigning a name to each record element in a dictionary and storing the relation into named variable',
    'create a random association with matrix to some named variable content',
    'performing linear algebra operations on matrix and named content where the variable represents vector entity',
    'storing the matrix-vector product of all such named contents as records in a dictionary',
    'reference to readout of the byte elements for legitimate computation performed over the data at that path',
    'some matrix could be constructed whose product with the named vector represented information corresponds to the linear combination of some unknown other legitimate vector',
    'matrix-matrix product between the ideal constructor of the information variables and approximated random matrix correlates would produce a matrix with correlation intact',
]


import layer, trainer, adaptor

# layer: takes in a single input (size) and produces a fixed point layer
# trainer: ..
# adaptor: ..


possibles += [
    "Given a language model like GPT2, it can be caused to produce more text than it was given as prompt",
    "A pretreined GPT2 model could be caused to follow exact input to output for all prompt to completion within the set of training dataset",
    "For a fixed size buffer and buffer containing integers could be mapped to corresponding larger set of integers generated by language model",
    "For any finite set of integer, the model could be made to associate their input labels to the labels corresponding to any other finite set of integers',
    "The model could be given a representation of one target set of text in terms of its own embedding table where the training over these quickly completes and learning happens in copying the syntactic correlations only",
    "For k different models that are trained on k distinct modes of some fixed k known types, where k classes of generative profile could be constructed from small model instances",
    "For a small model group of size k, we could define a function of at most k^N simultaneous classes where at each step k distinct tokens are produced for any possible candidates in k, upto the maximum length N",
    "It would be sufficient to choose between k observables for 1 < k < M generated token per window for k simultaneous window as set of coarse-graining task",
    "I would like to create k layers with N fixed size for each layers maximum output",
    "The stack of k processes will be running in parallel while their states at each moment gets summarized via a master channel while the k seperate processes are k slave channels",
    "
]



# What requires the stack of layers to be active?
# In what state collected through master describe the underlying causal process for which the N step evolution set in?

"""
Room acoustics is a subfield of acoustics dealing with the behaviour of sound in enclosed or partially-enclosed spaces. The architectural details of a room influences the behaviour of sound waves within it, with the effects varying by frequency. Acoustic reflection, diffraction, and diffusion can combine to create audible phenomena such as room modes and standing waves at specific frequencies and locations, echos, and unique reverberation patterns.

The way that sound behaves in a room can be broken up into four different frequency zones:

1. The first zone is below the frequency that has a wavelength of twice the longest length of the room.
- In this zone, sound behaves very much like changes in static air pressure.

2. Above that zone, until wavelengths are comparable to the dimensions of the room,[while not loop] room resonances dominate. [++]

- This transition frequency [frequency[transition]] is popularly known as the Schroeder frequency, or the cross-over frequency, and it differentiates the low frequencies [delta (low/mid/high)] which create standing waves [waves[standing]] within small rooms from the mid and high frequencies.[frequency[mid:, high]]

3. The third region which extends approximately 2 octaves is a transition to the fourth zone.

- In the fourth zone, sounds behave like rays of light bouncing around the room.



"""




class Channel:
    def send(self, message, address):
        # Sign into the network dictionary and search for the address given
        # When found, send the pass from this to that with the message being the action
        pass

    def insert(self, path):
        # Connect the path inflow to the current stack pointer to merge its contents
        pass

    def pan(self, amount):
        # Apply panning amount to all of the dependent signal pathways.
        pass

    def switch(self):
        # Switch the polarity to the opposite of what is effective
        pass

    def fade(self, amount):
        # Apply fader by the amount and make sure all pathways are transformed
        pass

    def mute(self):
        # Mute/Unmute based on the effective boolean value.
        pass

    def seperate(self, amount):
        # Apply stereo seperation by the amount
        pass

    def direct_injection(self, source):
        # Plugin the source edge to the channels line level input port.
        pass

    def side_chain(self, other, amount):
        # Construct side chained state with memory shared between the two neighboring channels by given amount.
        pass

    def mid_chain(self, sink):
        # Attach the sink of the neighbors side chained state.
        pass

    def disable_effect(self):
        # Turns of all the contributions from the channel modules and conserve the dry state only.
        pass

    def enable_effect(self):
        # Opposite of 'disable_effect' and restores wet state.
        pass

    def configure_input(self, index):
        # Sets the input source from driver configuration and selects the index from the device list.
        pass

    def configure_output(self, index):
        # Sets the output sink in driver configuration and selects the index from the device list.
        pass

    
